{"version":3,"sources":["store/actions.js","components/AsideNavigator/constants/constants.js","store/reducers.js","store/store.js","components/Header.js","components/ItemTypes/ItemTypes.js","components/AsideNavigator/MenuItemContent.js","components/AsideNavigator/AsideNavigatorList.js","components/AsideNavigator/AsideNavigatorMenu.js","components/AsideNavigator/AsideNavigatorSearch.js","components/AsideNavigator/AsideNavigatorBtnControl.js","components/AsideNavigator/AsideNavigator.js","components/DraggedBlock/DraggedBlock.js","components/WorkSpace/WorkSpace.js","App.js","serviceWorker.js","index.js"],"names":["actionsTypes","searchByQueryAsideMenu","query","resetId","type","menuItemsTypes","id","content","defaultMenuItems","imgName","title","actionsMenuItems","loggersMenuItems","rootReducer","combineReducers","asideMenuItems","state","action","filter","toLowerCase","includes","trim","activeAsideBtn","rememberedQuery","workSpaceBlocks","block","store","createStore","composeWithDevTools","applyMiddleware","thunk","Header","src","style","border","backgroundColor","padding","marginRight","marginBottom","cursor","float","DragSource","ItemTypes","beginDrag","props","data","dispatch","endDrag","monitor","item","getItem","console","log","getDropResult","connect","connectDragSource","dragSource","isDragging","dropResult","opacity","imgSrc","className","ref","name","value","AsideNavigatorList","activeAsideMenuItems","useSelector","useDispatch","map","key","AsideNavigatorMenu","useState","activeBtn","setActiveBtn","menuItem","onClick","getIdActiveBtn","AsideNavigatorSearch","debounceTimeout","placeholder","onChange","target","AsideNavigatorBtnControl","AsideNavigator","DraggedBlock","DropTarget","drop","connectDropTarget","dropTarget","isOver","canDrop","draggedBlocks","isActive","length","height","x0","y0","x1","y1","App","DndProvider","backend","Backend","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.deac4ccc.chunk.js","sourcesContent":["export const actionsTypes = {\n    SET_TRIGGERS: 'SET_TRIGGERS',\n    SEARCH_QUERY_ASIDE_MENU: 'SEARCH_QUERY_ASIDE_MENU',\n    GET_ID_ACTIVE_ASIDE_MENU_BTN: 'GET_ID_ACTIVE_ASIDE_MENU_BTN',\n    REMEMBER_QUERY_FOR_SEARCH: \"REMEMBER_QUERY_FOR_SEARCH\",\n    DRAG_ITEM_TO_WORK_SPACE: \"DRAG_ITEM_TO_WORK_SPACE\"\n};\n\nexport const setTriggers = id => ({\n    type: actionsTypes.SET_TRIGGERS,\n    id,\n});\n\n\nexport const searchByQueryAsideMenu = (query, resetId) => ({\n    type: actionsTypes.SEARCH_QUERY_ASIDE_MENU,\n    query,\n    resetId\n});\n\n\nexport const getIdActiveBtn = (id) => ({\n    type: actionsTypes.GET_ID_ACTIVE_ASIDE_MENU_BTN,\n    id,\n});\n\n\nexport const rememberQueryForSearchInDiffTabs = (query) => ({\n    type: actionsTypes.REMEMBER_QUERY_FOR_SEARCH,\n    query,\n});\n\n\nexport const dragItemToWorkspace = block => ({\n    type: actionsTypes.DRAG_ITEM_TO_WORK_SPACE,\n    block,\n});","export const TRIGGERS = \"triggers\";\nexport const ACTIONS = \"actions\";\nexport const LOGGERS = \"loggers\";\n\n\nexport const menuItemsTypes = [\n    {id: TRIGGERS, content: \"Triggers\"},\n    {id: ACTIONS, content: \"Actions\"},\n    {id: LOGGERS, content: \"Loggers\"},\n];\n\nexport const menuItemsTypesActiveClass = 'navactive side';\nexport const menuItemsTypesNotActiveClass = 'navdisabled side';","import {combineReducers} from 'redux';\nimport {actionsTypes} from './actions';\nimport {ACTIONS, LOGGERS, TRIGGERS} from '../components/AsideNavigator/constants/constants'\n\n\nconst defaultMenuItems = [\n    {   imgName: 'eye.svg',\n        title: \"New visitor\",\n        content: \"Triggers when somebody visits a specified page\"\n    },\n    {\n        imgName: 'action.svg',\n        title: \"Action is performed\",\n        content: \"Triggers when somebody performs a specified action\"\n    },\n    {\n        imgName: 'time.svg',\n        title: \"Time has passed\",\n        content: \"Triggers after a specified amount of time\"\n    },\n    {\n        imgName: 'error.svg',\n        title: \"Error prompt\",\n        content: \"Triggers when a specified error happens\"\n    },\n\n];\n\nconst actionsMenuItems = [\n    {\n        imgName: 'database.svg',\n        title: \"New database entry\",\n        content: \"Adds a new entry to a specified database\"\n    },\n    {\n        imgName: 'database.svg',\n        title: \"Update database\",\n        content: \"Edits and deletes database entries and properties\"\n    },\n    {\n        imgName: 'action.svg',\n        title: \"Action is performed\",\n        content: \"Performs or edits a specified action\"\n    },\n    {\n        imgName: 'twitter.svg',\n        title: \"Make a tweet\",\n        content: \"Makes a tweet with a specified query\"\n    },\n];\n\n\nconst loggersMenuItems = [\n    {\n        imgName: 'log.svg',\n        title: \"Add new log entry\",\n        content: \"Adds a new log entry to this project\"\n    },\n    {\n        imgName: 'log.svg',\n        title: \"Update logs\",\n        content: \"Edits and deletes log entries in this project\"\n    },\n    {\n        imgName: 'error.svg',\n        title: \"Promo an error\",\n        content: \"Triggers a specified error\"\n    },\n\n];\n\nconst asideMenuItemsReducer = (state = defaultMenuItems, action) => {\n\n    switch (action.type) {\n        case actionsTypes.SET_TRIGGERS :\n            const {id} = action;\n        switch (id) {\n            case ACTIONS:\n                return actionsMenuItems;\n            case LOGGERS:\n                return loggersMenuItems;\n            default:\n                return defaultMenuItems;\n        }\n        case actionsTypes.SEARCH_QUERY_ASIDE_MENU :\n\n            const {query, resetId} = action;\n\n            if (query===``) {\n\n                return resetId === ACTIONS ? actionsMenuItems : resetId === LOGGERS ? loggersMenuItems : defaultMenuItems;\n            }\n            return state.filter(({title, content})=>(title+content).toLowerCase().includes(query.toLowerCase().trim()));\n\n        default : return state;\n    }\n\n};\n\n\n\nconst rememberQueryReducer = (state = '', action) => {\n    switch (action.type) {\n        case actionsTypes.REMEMBER_QUERY_FOR_SEARCH :\n            const {query} = action;\n            return query;\n        default:\n            return state;\n    }\n};\n\nconst asideMenuActiveBtnReducer = (state = TRIGGERS, action) => {\n    switch (action.type) {\n        case actionsTypes.GET_ID_ACTIVE_ASIDE_MENU_BTN :\n            const {id} = action;\n            return id;\n        default:\n            return state;\n    }\n};\n\n\nconst workSpaceReducer = (state = [], action) => {\n    switch (action.type) {\n        case actionsTypes.DRAG_ITEM_TO_WORK_SPACE :\n            const {block} = action;\n            return [...state, block];\n        default:\n            return state;\n    }\n\n};\n\n\n\nexport const rootReducer = combineReducers({\n    asideMenuItems: asideMenuItemsReducer,\n    activeAsideBtn: asideMenuActiveBtnReducer,\n    rememberedQuery: rememberQueryReducer,\n    workSpaceBlocks: workSpaceReducer\n});","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducers';\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n","import React from 'react';\n\n\nconst Header = () => {\n\n    return (\n        <div id=\"navigation\">\n            <div id=\"leftside\">\n                <div id=\"details\">\n                    <div id=\"back\"><img src=\"assets/arrow.svg\"/></div>\n                    <div id=\"names\">\n                        <p id=\"title\">Your automation pipeline</p>\n                        <p id=\"subtitle\">Marketing automation</p>\n                    </div>\n                </div>\n            </div>\n            <div id=\"centerswitch\">\n                <div id=\"leftswitch\">Diagram view</div>\n                <div id=\"rightswitch\">Code editor</div>\n            </div>\n            <div id=\"buttonsright\">\n                <div id=\"discard\">Discard</div>\n                <div id=\"publish\">Publish to site</div>\n            </div>\n        </div>\n\n    )\n};\n\nexport default Header;","export default {\r\n\tBOX: 'box',\r\n}\r\n","import React from 'react';\nimport {useDispatch} from 'react-redux'\nimport ItemTypes from '../ItemTypes/ItemTypes';\nimport { DragSource } from 'react-dnd';\nimport { dragItemToWorkspace } from '../../store/actions';\n\n\nconst style = {\n    border: '1px dashed gray',\n    backgroundColor: 'white',\n    padding: '0.5rem 1rem',\n    marginRight: '1.5rem',\n    marginBottom: '1.5rem',\n    cursor: 'move',\n    float: 'left',\n};\n\n\nconst MenuItemContent = ({data, isDragging, connectDragSource}) => {\n\n    const opacity = isDragging ? 0.8 : 1;\n\n    const {title, content, imgName} = data;\n    const imgSrc = `assets/${imgName}`;\n    return (\n        <div >\n            <div className=\"blockelem create-flowy noselect\" ref={connectDragSource} style={{ ...style, opacity }}>\n                <input type=\"hidden\" name='blockelemtype' className=\"blockelemtype\" value=\"1\"/>\n                <div className=\"grabme\">\n                    <img src=\"assets/grabme.svg\"/>\n                </div>\n                <div className=\"blockin\">\n                    <div className=\"blockico\">\n                        <span></span>\n                        <img src={imgSrc}/>\n                    </div>\n                    <div className=\"blocktext\">\n                        <p className=\"blocktitle\">{title}</p>\n                        <p className=\"blockdesc\">{content}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DragSource(\n  ItemTypes.BOX,\n  {\n      beginDrag: (props) => {\n        return  ({ data:props.data, dispatch: props.dispatch })\n      },\n\n      endDrag(props, monitor) {\n\n          const item = monitor.getItem();\n          console.log(props,'itemitem');\n          const dropResult = monitor.getDropResult();\n          if (dropResult) {\n             item.dispatch(dragItemToWorkspace(item.data));\n             // alert(`You dropped ${item.data.title} into ${dropResult.name}!`)\n          }\n      },\n  },\n  (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging(),\n      dropResult: monitor.getDropResult()\n  }),\n)(MenuItemContent)","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux'\nimport MenuItemContent from \"./MenuItemContent\";\n\nconst AsideNavigatorList = () => {\n    const activeAsideMenuItems = useSelector(state => state.asideMenuItems);\n    const dispatch = useDispatch();\n\n    return (\n\n        <div id=\"blocklist\">\n\n            {activeAsideMenuItems.map(item => (\n\n                <MenuItemContent\n                  key={item.title}\n                  data={item}\n                  dispatch={dispatch}\n                />\n\n            ))}\n\n        </div>\n    );\n};\n\nexport default AsideNavigatorList;","import React, {useState} from 'react';\nimport {menuItemsTypes} from './constants/constants'\nimport {getIdActiveBtn, searchByQueryAsideMenu, setTriggers} from \"../../store/actions\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {menuItemsTypesActiveClass, menuItemsTypesNotActiveClass} from './constants/constants'\n\nconst AsideNavigatorMenu = () => {\n    const dispatch = useDispatch();\n    const query = useSelector(state=>state.rememberedQuery);\n    const [activeBtn, setActiveBtn] = useState(\"triggers\");\n    return (\n        <div>\n            <div id=\"subnav\">\n                {menuItemsTypes.map(menuItem => (\n                    <div key={menuItem.id}>\n                        <div\n                            className={activeBtn === menuItem.id ? menuItemsTypesActiveClass : menuItemsTypesNotActiveClass}\n                            id={menuItem.id}\n                            onClick={() => {\n                                dispatch(setTriggers(menuItem.id));\n                                setActiveBtn(menuItem.id);\n                                dispatch(getIdActiveBtn(menuItem.id));\n                                dispatch(searchByQueryAsideMenu(query, menuItem.id))\n                            }}\n                        >\n                            {menuItem.content}\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default AsideNavigatorMenu;","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux'\nimport {searchByQueryAsideMenu, rememberQueryForSearchInDiffTabs} from \"../../store/actions\";\nimport { DebounceInput } from 'react-debounce-input';\n\nconst AsideNavigatorSearch = () => {\n    const dispatch = useDispatch();\n    const activeAsideBtn = useSelector(state=>state.activeAsideBtn);\n    return (\n        <div>\n            <div id=\"search\">\n                <img src=\"assets/search.svg\"/>\n                <DebounceInput\n                    debounceTimeout={500}\n                    type=\"text\"\n                    placeholder=\"Search blocks\"\n                    onChange={({target})=>\n                    {dispatch(searchByQueryAsideMenu(target.value, activeAsideBtn));\n                     dispatch(rememberQueryForSearchInDiffTabs(target.value))\n                    }\n\n                    }\n\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default AsideNavigatorSearch;","import React from 'react';\n\nconst AsideNavigatorBtnControl = () => {\n    return (\n        <div>\n            <div id=\"closecard\">\n                <img src=\"assets/closeleft.svg\"/>\n            </div>\n        </div>\n    );\n};\n\nexport default AsideNavigatorBtnControl;","import React from 'react';\nimport AsideNavigatorList from \"./AsideNavigatorList\";\nimport AsideNavigatorMenu from \"./AsideNavigatorMenu\";\nimport AsideNavigatorSearch from \"./AsideNavigatorSearch\";\nimport AsideNavigatorBtnControl from \"./AsideNavigatorBtnControl\";\n\n\n\nconst AsideNavigator = () => {\n    return (\n        <div id=\"leftcard\">\n           <AsideNavigatorBtnControl/>\n            <p id=\"header\">Blocks</p>\n           <AsideNavigatorSearch/>\n           <AsideNavigatorMenu/>\n           <AsideNavigatorList/>\n\n        </div>\n    );\n};\n\nexport default AsideNavigator;","import React from 'react';\r\nimport Draggable from 'react-draggable'\r\n\r\n\r\n\r\nconst DraggedBlock = ({data}) => {\r\n\tconst {title, content, imgName} = data;\r\n\tconst imgSrc = `assets/${imgName}`;\r\n\treturn (\r\n\t\t<Draggable >\r\n\t\t\t<div className=\"blockelem create-flowy noselect dragged-block\" >\r\n\t\t\t\t<input type=\"hidden\" name='blockelemtype' className=\"blockelemtype\" value=\"1\"/>\r\n\t\t\t\t<div className=\"grabme\">\r\n\t\t\t\t\t<img src=\"assets/grabme.svg\"/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"blockin\">\r\n\t\t\t\t\t<div className=\"blockico\">\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t<img src={imgSrc}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"blocktext\">\r\n\t\t\t\t\t\t<p className=\"blocktitle\">{title}</p>\r\n\t\t\t\t\t\t<p className=\"blockdesc\">{content}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Draggable>\r\n\t);\r\n};\r\n\r\nexport default DraggedBlock;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { DropTarget } from 'react-dnd';\r\nimport ItemTypes from '../ItemTypes/ItemTypes';\r\nimport DraggedBlock from '../DraggedBlock/DraggedBlock';\r\n\r\nimport { Line } from 'react-lineto';\r\n\r\nfunction render() {\r\n\r\n\treturn (\r\n\t\t<Line x0={0} y0={0} x1={40} y1={40} />\r\n\t);\r\n}\r\n\r\n\r\nconst WorkSpace = ({ canDrop, isOver, connectDropTarget }) => {\r\n\tconst draggedBlocks = useSelector(state => state.workSpaceBlocks);\r\n\r\n\r\n\tconst isActive = canDrop && isOver;\r\n\tif (isActive) {\r\n\t\tconsole.log('isActive');\r\n\t} else if (canDrop) {\r\n\t\tconsole.log('canDrop');\r\n\t}\r\n\treturn (\r\n\r\n\t\t<div ref={connectDropTarget} className=\"work-space\">\r\n\t\t\t{isActive ? 'Release to drop' : 'Drag a box here'}\r\n\r\n\t\t\t\t{draggedBlocks.length > 0 && draggedBlocks.map(block => (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t<DraggedBlock\r\n\t\t\t\t\t\tkey={block.title}\r\n\t\t\t\t\t\tdata={block}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div style={{height: '100px', border: \"1px solid red\"}}>\r\n\t\t\t\t\t\t{render()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t</>\r\n\t\t\t\t))}\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n};\r\n\r\n\r\nexport default DropTarget(\r\n\tItemTypes.BOX,\r\n\t{\r\n\t\tdrop: () => ({ name: 'WorkSpace' })\r\n\t},\r\n\t(connect, monitor) => ({\r\n\t\tconnectDropTarget: connect.dropTarget(),\r\n\t\tisOver: monitor.isOver(),\r\n\t\tcanDrop: monitor.canDrop()\r\n\t})\r\n)(WorkSpace);\r\n","import React from 'react';\nimport Header from './components/Header'\nimport { DndProvider } from 'react-dnd'\nimport Backend from 'react-dnd-html5-backend'\nimport './App.css';\nimport AsideNavigator from \"./components/AsideNavigator/AsideNavigator\";\nimport WorkSpace from './components/WorkSpace/WorkSpace';\n\n\nfunction App() {\n    return (\n        <div>\n            <DndProvider backend={Backend}>\n           <Header/>\n\n            <AsideNavigator/>\n            <WorkSpace/>\n            <div id=\"propwrap\">\n                <div id=\"properties\">\n                    <div id=\"close\">\n                        <img src=\"assets/close.svg\"/>\n                    </div>\n                    <p id=\"header2\">Properties</p>\n                    <div id=\"propswitch\">\n                        <div id=\"dataprop\">Data</div>\n                        <div id=\"alertprop\">Alerts</div>\n                        <div id=\"logsprop\">Logs</div>\n                    </div>\n                    <p className=\"inputlabel\">Select database</p>\n                    <div className=\"dropme\">Database 1 <img src=\"assets/dropdown.svg/\"/></div>\n                    <p className=\"inputlabel\">Check properties</p>\n                    <div className=\"dropme\">All<img src=\"assets/dropdown.svg\"/></div>\n                    <div className=\"checkus\"><img src=\"assets/checkon.svg\"/><p>Log on successful performance</p></div>\n                    <div className=\"checkus\"><img src=\"assets/checkoff.svg\"/><p>Give priority to this block</p></div>\n                </div>\n                <div id=\"divisionthing\"></div>\n                <div id=\"removeblock\">Delete blocks</div>\n            </div>\n            </DndProvider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}